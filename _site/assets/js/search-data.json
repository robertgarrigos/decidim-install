{
  "0": {
    "id": "0",
    "title": "Advanced config & tricks",
    "content": "Advanced configuration of Decidim Once deployed our instance of Decidim some we may want to change some settings (for instance, the available languages in a organization). As I found many aspect under-documented or missing at all, here are some options that may interest you to update/change your Decidim instance. Change the available languages of an organization When you first create and organization, they make you choose the available languages for it (through the /system/ url). However, when you access that url to edit the organization, the language selector is not available anymore. Here is a way to update that locales manually: First, be sure that your initializer file has all the locales you want: Edit the file config/initializers/decidim.rb and be sure to include all the necessary locales: ... # Change these lines to set your preferred locales config.default_locale = :en config.available_locales = [:en, :ca, :es, :fr, :pt] .. Then you need to access the rails console and update the organization locales manually. Access to your rails console with the command: cd ~/your-decidim-path bin/rails c You should view something like this: Loading development environment (Rails 5.2.1) irb(main):001:0&gt; Then you need to select your organization. If you have only one organization you can just run the command: irb(main):001:0&gt; o=Decidim::Organization.find(1) By doing this we‚Äôve fetched from the database the first item in the table organizations and assigned to the variable o. Now we can check our current locales: irb(main):002:0&gt; o.available_locales =&gt; [&quot;en&quot;, &quot;ca&quot;, &quot;es&quot;] irb(main):003:0&gt; We can add more locales by doing this: irb(main):004:0&gt; o.available_locales += [&quot;fr&quot;, &quot;pt&quot;] =&gt; [&quot;en&quot;, &quot;ca&quot;, &quot;es&quot;, &quot;pt&quot;, &quot;fr&quot;] irb(main):005:0&gt; or just overwrite them: irb(main):005:0&gt; o.available_locales = [&quot;en&quot;, &quot;ca&quot;, &quot;es&quot;, &quot;pt&quot;, &quot;fr&quot;] =&gt; [&quot;en&quot;, &quot;ca&quot;, &quot;es&quot;, &quot;pt&quot;, &quot;fr&quot;] irb(main):006:0&gt; Then we need to save them by executing the command o.save!: irb(main):006:0&gt; o.save! (24.1ms) BEGIN Decidim::Organization Exists (15.5ms) SELECT 1 AS one FROM &quot;decidim_organizations&quot; WHERE &quot;decidim_organizations&quot;.&quot;name&quot; = $1 AND &quot;decidim_organizations&quot;.&quot;id&quot; != $2 LIMIT $3 [[&quot;name&quot;, &quot;Hayes LLC&quot;], [&quot;id&quot;, 1], [&quot;LIMIT&quot;, 1]] Decidim::Organization Exists (1.8ms) SELECT 1 AS one FROM &quot;decidim_organizations&quot; WHERE &quot;decidim_organizations&quot;.&quot;host&quot; = $1 AND &quot;decidim_organizations&quot;.&quot;id&quot; != $2 LIMIT $3 [[&quot;host&quot;, &quot;localhost&quot;], [&quot;id&quot;, 1], [&quot;LIMIT&quot;, 1]] (0.7ms) COMMIT =&gt; true irb(main):007:0&gt; Done! your new locales should be available in your URL. NOTE: It‚Äôs difficult to remove languages as some content is cached in some places once generated. Removing languages can lead easily to generation of 500 errors.",
    "url": "http://localhost:4000/advanced-config/",
    "relUrl": "/advanced-config/"
  },
  "1": {
    "id": "1",
    "title": "Minimal configuration of Decidim",
    "content": "Basic configuration of Decidim In this document, we‚Äôll finish the configuration of our installation of Decidim in order to make it capable of the most basic things, like sending emails. This configuration is independent of the operating system, that‚Äôs why it‚Äôs in a different file. I‚Äôll assume here that you have a running copy of Decidim with empty content, no users or organizations created yet (a part from the system user admin created in the previous tutorial). Email configuration The most important thing to configure is the capability for sending emails, otherwise users won‚Äôt be able to register. We‚Äôll configure here a Gmail account, which is suitable for small organizations in order to get started. Configure any other SMTP provider is analogous. NOTE: Gmail has a limit of 500 recipients per day (10000 per day if you are using Gsuite) and, therefore, is not recommended for medium/large production sites. Another drawback of using Gmail is that the ‚ÄúFrom‚Äù field of the email is going to be rewritten no matter what we configure in Decidim. This is going to affect how the end users sees the sender. You can use external email providers like Amazon SES or similar. First, we need to configure our Gmail account in order to allow external SMTP activation. Gmail accounts may have SMTP sending disable by default if you have disabled the option ‚ÄúEnable less secure applications‚Äù. In that case we need to create an application password for Decidim. Option 1, enable ‚Äúless secure applications‚Äù. Go to this link (logged into your Gmail account), and activate the checkbox ‚ÄúAllow less secure apps‚Äù: https://myaccount.google.com/lesssecureapps Official instructions from Google are here: https://support.google.com/accounts/answer/6010255?hl=en Option 2, create an application specific password. If you have 2-factor authentication on your Gmail account you must choose this option. Go to https://security.google.com/settings/security/apppasswords and login using your Gmail account. Create a new application password by selecting the option ‚ÄúOther‚Äù in the section ‚ÄúDevice‚Äù: A new window will appear with your password, copy it because you won‚Äôt be able to read that password anymore once you close that window (you can always generate a news app password though).Official documentation from Google is here: https://support.google.com/mail/answer/185833?hl=en We can now proceed to configure Decidim to use our credentials. Let‚Äôs edit our application.yml file and add some constants in that file: nano ~/decidim-app/config/application.yml Add these lines at the end, by using your own Gmail (or Gsuite) account and using your Gmail password if choosed the Option 1 or the generated password in case of Option 2 SMTP_USERNAME: my-decidim@gmail.com SMTP_PASSWORD: suwbyijyxoppiwwz SMTP_ADDRESS: smtp.gmail.com SMTP_DOMAIN: gmail.com If you are using Gsuite, replace gmail.com with your own domain (except in the line SMTP_ADDRESS). If you are using some other SMTP configuration you have more parameters to tweak under the file config/secrets.yml Check the section production on that file (for example, you may want to change the default port from 587 to 465, 25, etc) Now, we need to add a processor to Ruby on Rails that will actually send the emails. There‚Äôs several options here, as usually we are going to use the simplest one. In our Gemfile (if you followed the previous guide), we added the Gem delayed_job_active_record, ensure that your Gemfile has it along with the daemons gem: group :production do gem &quot;passenger&quot; gem &#39;delayed_job_active_record&#39; gem &quot;daemons&quot; end We need to setup the delayed_job gem, run these commands: cd ~/decidim-app bundle install bin/rails generate delayed_job:active_record bin/rake db:migrate At this point, our system should be able to send emails, however, there‚Äôs and additional file that should be configured to specify our ‚ÄúFROM‚Äù sender field. This is specially important if you don‚Äôt use Gmail, because Gmail always overwrites that field to match the sender account. So, edit the file config/initializers/decidim.rb and change the values My Application Name and change-me@domain.org values to match your own ones: cd ~/decidim-app nano config/initializers/decidim.rb Search for these lines and change them to match your own values: ... Decidim.configure do |config| config.application_name = &quot;My Application Name&quot; config.mailer_sender = &quot;change-me@domain.org&quot; ... Delayed job is an independent process that handles emails asynchronously, it needs to be up and running, use this command to start the process: cd ~/decidim-app RAILS_ENV=production bin/delayed_job restart If you face problems of non-sent emails, please check if delayed_job is running: RAILS_ENV=production bin/delayed_job status You should now ensure that delayed_job is started on system reboot. To ensure that we can create a custom script in the system crontab: Create a new file in your config folder: cd ~/decidim-app nano config/delayed_job_cron.sh Copy this content to that file, changing the APP_PATH to match your decidim app if required: #!/bin/bash export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot; eval &quot;$(rbenv init -)&quot; APP_PATH=&quot;$HOME/decidim-app&quot; if ! [ -s $APP_PATH/tmp/pids/delayed_job.pid ]; then RAILS_ENV=production $APP_PATH/bin/delayed_job start fi Exit (pressing CTRL-X and saving), then give the file execution permissions: chmod +x config/delayed_job_cron.sh Now create a crontab entry with the command: crontab -e Add the next line to it (again, change the path if you have personalized the application route): */5 * * * * /home/decidim/decidim-app/config/delayed_job_cron.sh üëâ A more robust solution is to use sidekiq, this involves the use of the additional simple storage database Redis. The process is described in the configuration of Decidim using AWS, but Redis should be installed manually if using the DigitalOcean guide. Now, if you are using IPv6 in your system, you may encounter problems sending emails via external smtp servers (at least with Gmail). If you don‚Äôt need IPv6 (if you don‚Äôt know, chances are that you don‚Äôt), I‚Äôd recommend to disable it. To do that edit the file /etc/sysctl.conf: sudo nano /etc/sysctl.conf And add at the end of the file these lines: #disable ipv6 net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 Apply the changes to the system: sudo sysctl -p Finally, reload passenger with this command: sudo passenger-config restart-app ~/decidim-app Our system should be ready now, we can go to our Decidim URL/system login with our system manager user created in the previous tutorial and create our first organization. You‚Äôll see a window similar to this: Once created you can start using Decidim, next steps are optional (but recommended). Debugging email problems If you‚Äôre your Decidim is not sending mails you need to find out the cause. Decidim has a log file, in our case it‚Äôs placed in the folder log in our installation folder. You can follow ‚Äúlive‚Äù everything that happens using the tail command: tail ~/decidim-app/log/production.log -f (Press CTRL-C to exit) But we are interested in finding errors while sending emails, you can do it with grep: grep ERROR ~/decidim-app/log/production.log -A3 -B3 If that gives you some results you may want to post an issue with the info. For example, if you see something like this: -==_mimepart_5b4f1d00c0e07_4b232aceae7075f418469-- E, [2018-07-18T12:57:34.801540 #19235] ERROR -- : [ActiveJob] [ActionMailer::DeliveryJob] [a0572a5f-6ed3-45dd-bc24-3568bc6f665b] Error performing ActionMailer::DeliveryJob (Job ID: a0572a5f-6ed3-45dd-bc24-3568bc6f665b) from Async(mailers) in 30203.2ms: Net::OpenTimeout (execution expired): /home/decidim/.rbenv/versions/2.5.1/lib/ruby/2.5.0/net/smtp.rb:539:in `initialize&#39; /home/decidim/.rbenv/versions/2.5.1/lib/ruby/2.5.0/net/smtp.rb:539:in `open&#39; Then, you are probably suffering the IPv6 problem commented before. Enabling SSL (with Let‚Äôs encrypt) Although this is not mandatory in order to have Decidim working, in a practical way it is: SSL will give your users trust and it‚Äôs free nowadays. SSL ensures that you offer a secure site to your users (URL will start with https://) and the browsers won‚Äôt annoy you with that ‚Äúinsecure page‚Äù message. You can follow this guide from DigitalOcean to configure Nginx with Let‚Äôs Encrypt, here are the steps summarized: We are going to use the official Certbot from the Let‚Äôs Encrypt project. First, we install the latests version with these commands: sudo add-apt-repository -y ppa:certbot/certbot sudo apt install -y python-certbot-nginx The original guide has now some step to check our domain name and our firewall configuration, if you‚Äôve followed the previous tutorial we have this already covered. So, let‚Äôs run the certbot script (change my-decidim.org with your own full URL): sudo certbot --nginx -d my-decidim.org You will have to answer 3 questions (write your email, accept the terms and choose if you want to be included in their newsletter). Once the script has collected your certificate, it will ask you if you want to redirect all http to https, I recommend to choose yes here so no further configuration will be needed in our Decidim install. The output of the full command should be like this: decidim@decidim:~$ sudo certbot --nginx -d my-decidim.org Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx Enter email address (used for urgent renewal and security notices) (Enter &#39;c&#39; to cancel): ivan@platoniq.net - Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must agree in order to register with the ACME server at https://acme-v01.api.letsencrypt.org/directory - (A)gree/(C)ancel: A - Would you be willing to share your email address with the Electronic Frontier Foundation, a founding partner of the Let&#39;s Encrypt project and the non-profit organization that develops Certbot? We&#39;d like to send you email about our work encrypting the web, EFF news, campaigns, and ways to support digital freedom. - (Y)es/(N)o: Y Obtaining a new certificate Performing the following challenges: http-01 challenge for my-decidim.org Waiting for verification... Cleaning up challenges Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/decidim.conf Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you&#39;re confident your site works on HTTPS. You can undo this change by editing your web server&#39;s configuration. - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Redirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/decidim.conf - Congratulations! You have successfully enabled https://my-decidim.org You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=my-decidim.org - IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/my-decidim.org/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/my-decidim.org/privkey.pem Your cert will expire on 2018-10-17. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the &quot;certonly&quot; option. To non-interactively renew *all* of your certificates, run &quot;certbot renew&quot; - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let&#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le The script also creates an entry in the crontab system to renew automatically the certificate every 3 months. Read the original guide for more details. What now? Nothing! That‚Äôs it! You can point your browser to your URL and will see how your Decidim is served securely. Setting up Oauth authentication By configuring OAuth, you‚Äôll be able to log into your installation of Decidim by using some well known providers, like Facebook, Google or Twitter. I highly recommend to configure SSL before get into this step. You‚Äôll need to tell the providers about your full URL and that includes the https:// part. You can just follow the original documentation from the core team of Decidim, but as we are using the gem figaro we‚Äôll modify the file config/application.yml instead of config/secrets.yml. These are the original instructions tweaked to match our configuration: Facebook Navigate to Facebook Developers Page Follow the ‚ÄúAdd a New App‚Äù link. Click the ‚ÄúWebsite‚Äù option. Fill in your application name and click ‚ÄúCreate New Facebook App ID‚Äù button. Fill in the contact email info and category. Validate the captcha. Ignore the source code and fill in the URL field with https://YOUR_DECIDIM_HOST/users/auth/facebook/callback Navigate to the application dashboard and copy the APP_ID and APP_SECRET Twitter Navigate to Twitter Developers Page You need to apply for a Developer‚Äôs account, will be guided during the process Follow the ‚ÄúMy apps‚Äù link. Click the ‚ÄúCreate New App‚Äù button. Fill in the Name, Description fields. Fill in the Website field with YOUR_DECIDIM_HOST value and the Callback URL field with https://YOUR_DECIDIM_HOST/users/auth/twitter/callback. If you are working on a development app you need to use http://127.0.0.1:3000/ instead of http://localhost:3000/. Check the ‚ÄòDeveloper Agreement‚Äô checkbox and click the ‚ÄòCreate your Twitter application‚Äô button. Navigate to the ‚ÄúKeys and Access Tokens‚Äù tab and copy the API_KEY and API_SECRET. (Optional) Navigate to the ‚ÄúPermissions‚Äù tab and check the ‚ÄúRequest email addresses from users‚Äù checkbox. Google Navigate to Google Developers Page Follow the ‚ÄòCreate project‚Äô link. Fill in the name of your app. Navigate to the project dashboard and click on ‚ÄúEnable API‚Äù Click on Google+ API and then ‚ÄúEnable‚Äù Navigate to the project credentials page and click on OAuth consent screen. Fill in the Product name field Click on Credentials tab and click on ‚ÄúCreate credentials‚Äù button. Select OAuth client ID. Select Web applications. Fill in the Authorized Javascript origins with your url. Then fill in the Authorized redirect URIs with your url and append the path /users/auth/google_oauth2/callback. Copy the CLIENT_ID AND CLIENT_SECRET Common steps Once you‚Äôve created your desired applications in the providers you want. You need to activate the variable enabled in the file config/secrets.yml for each configured service. For instance, if we want the Facebook login, we need to edit the secion ‚Äúdefault/ommiauth/facebook‚Äù: nano ~/decidim-app/config/secrets.yml We will make sure it looks like this: ... default: &amp;default omniauth: facebook: # It must be a boolean. Remember ENV variables doesn&#39;t support booleans. enabled: true app_id: &lt;%= ENV[&quot;OMNIAUTH_FACEBOOK_APP_ID&quot;] %&gt; app_secret: &lt;%= ENV[&quot;OMNIAUTH_FACEBOOK_APP_SECRET&quot;] %&gt; ... Repeat the process for every service you want. After that we need to add the env vars to our config/application.yml file. nano ~/decidim-app/config/application.yml Add the lines you need according to your services: # if you&#39;ve enabled facebook: OMNIAUTH_FACEBOOK_APP_ID: &lt;your-facebook-app-id&gt; OMNIAUTH_FACEBOOK_APP_SECRET: &lt;your-facebook-app-secret&gt; # if twitter: OMNIAUTH_TWITTER_API_KEY: &lt;your-twitter-api-key&gt; OMNIAUTH_TWITTER_API_SECRET: &lt;your-twitter-api-secret&gt; # if google: OMNIAUTH_GOOGLE_CLIENT_ID: &lt;your-google-client-id&gt; OMNIAUTH_GOOGLE_CLIENT_SECRET: &lt;your-google-client-secret&gt; Restart passenger and you‚Äôre done: sudo passenger-config restart-app ~/decidim-app Note if you are using ENV vars directly - as we do in AWS Elastic Beanstalk - You don‚Äôt need to edit the file config/application.yml just create the appropiate ENV var in your instances. In Elastic Beanstalk the commands will be: eb setenv OMNIAUTH_FACEBOOK_APP_ID=***** eb setenv OMNIAUTH_FACEBOOK_APP_SECRET=***** eb deploy Geolocation configuration Configuring geolocation allows to specify real addresses and display the locations of meetings in maps. The easiest way to setup geolocation is to create an account hi Here Maps. Open next URL in your browser and register a developer account there: https://developer.here.com/?create=Evaluation&amp;keepState=true&amp;step=account Then obtain your API ID and Code from there, you should look for a place like this: Now edit your config/application.yml again (or send the ENV vars in case you are not using the file application.yml): nano ~/decidim-app/config/application.yml And place these new extra lines at the bottom of the file: GEOCODER_LOOKUP_APP_ID: &lt;your-App-ID&gt; GEOCODER_LOOKUP_APP_CODE: &lt;your-App-Code&gt; Either you use ENV variables or the config/application.yml file, you need to uncomment the following lines from the file config/initializers/decidim.rb: # config.geocoder = { # static_map_url: &quot;https://image.maps.cit.api.here.com/mia/1.6/mapview&quot;, # here_app_id: Rails.application.secrets.geocoder[:here_app_id], # here_app_code: Rails.application.secrets.geocoder[:here_app_code] # } leave it like: config.geocoder = { static_map_url: &quot;https://image.maps.cit.api.here.com/mia/1.6/mapview&quot;, here_app_id: Rails.application.secrets.geocoder[:here_app_id], here_app_code: Rails.application.secrets.geocoder[:here_app_code] } Create a commit and push to remote if you are using GIT. Restart passenger (or deploy) and you‚Äôre ready to use maps geolocation in Decidim: sudo passenger-config restart-app ~/decidim-app",
    "url": "http://localhost:4000/basic-config/",
    "relUrl": "/basic-config/"
  },
  "2": {
    "id": "2",
    "title": "Installing in Amazon AWS with ElasticBeanstalk",
    "content": "Install Decidim in Amazon AWS - ElasticBeanstalk AWS Elastic Beanstalk is the Amazon Web Services solution for deploying and scaling web applications and services. Several languages are supported, Ruby included. It‚Äôs the AWS alternative has other PaaS like Heroku (probably the most popular option for Ruby on Rails applications). As AWS provides generous discounts for non-profit organizations this may be a very desirable cost-effective option for deploying Decidim for many organizations. This guide is heavily inspired in this nice guide written by Rob Face but targeting Decidim specifically, I recommend reading it as I‚Äôll skip some comments regarding advantages/features and such from AWS. 1. Create your Decidim App In the previous guide, we‚Äôve created our Decidim app directly in the server. Although you can do that here, there‚Äôs no much point doing it because ElasticBeanstalk is going to create the hosting servers for us. So, the recommended way to go is to do all the subsequent commands in your local development machine (or use the docker alternative provide by Decidim). You are going to need to have everything related to ruby (and rails) installed. If you are using Ubuntu 18.04 you can just execute: sudo apt install -y ruby postgresql libpq-dev nodejs imagemagick rubygems-integration git gem install decidim decidim decidim-app Change to the involved folder and initialize it as GIT repository (not optional any more): cd ~/decidim-app git init git add . git commit -m &quot;My Decidim just created&quot; Check the previous install guide for more in-detail instructions. 2. Registering AWS and install the required tools 2.1 Registering in AWS You are going to need an AWS account and install some command line tools in order follow this guide. Go to https://portal.aws.amazon.com/billing/signup#/start and register an account un AWS. They‚Äôll give 12 months for free on many services (including those needed for this guide). Create a key/secret credentials that will allow the command line authenticate an perform actions in the AWS API in your behalf.Go to https://console.aws.amazon.com/iam/home?#/users and create a new user with programmatic access: Attach administrative access to this user: Grab your access key ID and secret access key, you‚Äôll be asked for those values later on: We need to add additional permissions on that user, this is going to be needed later on as well when configuring our GIT repository: Go to the Security credentials tab on the user summary detail and click the Generate button under HTTPS Git credentials‚Ä¶ Again, a new pair of user/password will be generated, save theses for later: 2.2 Install the command line elasticbeanstalk: In Linux systems, use pip (the python manager, Python 2.7 required): pip install awsebcli --upgrade --user In MacOS you can use homebrew: brew update brew install aws-elasticbeanstalk If your are using Windows, I‚Äôd recommend to install to use the Windows Subsytem for Linux and use the Linux instructions when required: https://docs.microsoft.com/en-us/windows/wsl/install-win10 Be sure to have the tool properly installed: $ eb --version EB CLI 3.14.6 (Python 2.7.1) Read the official documentation about this tool is you have problems. 3. Initialize ElasticBeanstalk We are going to initialize ElasticBeanstalk in our Decidim copy, after that deploying will involve a simple command everytime we make a change. cd ~/decidim-app eb init This is going to ask many questions: Choose a region (Choose 1 for free SSL services) Select a default region 1) us-east-1 : US East (N. Virginia) 2) us-west-1 : US West (N. California) 3) us-west-2 : US West (Oregon) 4) eu-west-1 : EU (Ireland) 5) eu-central-1 : EU (Frankfurt) 6) ap-south-1 : Asia Pacific (Mumbai) 7) ap-southeast-1 : Asia Pacific (Singapore) 8) ap-southeast-2 : Asia Pacific (Sydney) 9) ap-northeast-1 : Asia Pacific (Tokyo) 10) ap-northeast-2 : Asia Pacific (Seoul) 11) sa-east-1 : South America (Sao Paulo) 12) cn-north-1 : China (Beijing) 13) cn-northwest-1 : China (Ningxia) 14) us-east-2 : US East (Ohio) 15) ca-central-1 : Canada (Central) 16) eu-west-2 : EU (London) 17) eu-west-3 : EU (Paris) (default is 3): 4 Then you‚Äôll be asked to configure the credentials we‚Äôve generated in the step 2.1: You have not yet set up your credentials or your credentials are incorrect You must provide your credentials. (aws-access-id): AKI**************BTQ (aws-secret-key): YLvUbS****************OviQZkl A name for your application in AWS (put whatever you want or leave empty for the default): Enter Application Name (default is &quot;decidim-app&quot;): Application decidim-app has been created. As docker is pre-configured in Decidim, EB will think it should use it, as I don‚Äôt think is ready for production sites, answer no: It appears you are using Docker. Is this correct? (Y/n): n Then choose the right platform (choose Ruby and Ruby 2.5 (Passenger Standalone)): Select a platform. 1) Node.js 2) PHP 3) Python 4) Ruby 5) Tomcat 6) IIS 7) Docker 8) Multi-container Docker 9) GlassFish 10) Go 11) Java 12) Packer (default is 1): 4 Select a platform version. 1) Ruby 2.5 (Passenger Standalone) 2) Ruby 2.5 (Puma) 3) Ruby 2.4 (Passenger Standalone) 4) Ruby 2.4 (Puma) 5) Ruby 2.3 (Passenger Standalone) 6) Ruby 2.3 (Puma) 7) Ruby 2.2 (Passenger Standalone) 8) Ruby 2.2 (Puma) 9) Ruby 2.1 (Passenger Standalone) 10) Ruby 2.1 (Puma) 11) Ruby 2.0 (Passenger Standalone) 12) Ruby 2.0 (Puma) 13) Ruby 1.9.3 (default is 1): 1 We‚Äôre are going to use the CodeCommit service as a remote origin to our GIT repository, now we are going to be asked about the creation of that repository: Note: Elastic Beanstalk now supports AWS CodeCommit; a fully-managed source control service. To learn more, see Docs: https://aws.amazon.com/codecommit/ Do you wish to continue with CodeCommit? (y/N) (default is n): y Enter Repository Name (default is &quot;codecommit-origin&quot;): decidim-app Successfully created repository: decidim-app Enter Branch Name ***** Must have at least one commit to create a new branch with CodeCommit ***** (default is &quot;master&quot;): master Now we will be asked for a username to connect to the codecommit service, we are going to use the ones created in the Security credentials step, section 2.1 (Password won‚Äôt be visible when you paste it): Username for &#39;https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/aws&#39;: cli-manager+1-at-9*******22 Password for &#39;https://cli-manager@git-codecommit.eu-west-1.amazonaws.com/v1/repos/aws&#39;: Successfully created branch: master Then, we need to configure SSH access to our instances, this step will generate a public/private rsa key. We are going to use this key to access the generated server without needing to type a password every time. Do you want to set up SSH for your instances? (Y/n): Y Type a keypair name. (Default is aws-eb): Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/ivan/.ssh/aws-eb. Your public key has been saved in /home/ivan/.ssh/aws-eb.pub. The key fingerprint is: SHA256:PK************************************ aws-eb The key&#39;s randomart image is: +[RSA 2048]-+ |.. .o.+ | |+.oo + . | |++= o o . o | |o= o = = B | |o . +.+ S = | | o= o X o | | ...E o + | | ooo.o | | .+oo | +-[SHA256]--+ WARNING: Uploaded SSH public key for &quot;aws-eb&quot; into EC2 for region eu-west-1. The init command will end here. Now, we could push our code to the server, but we will be asked for the password every time (because it‚Äôs being configure as a HTTPS repository). To change that, we are going to change the generated GIT configuration file so we will use SSH configuration and use the previously generated key pair. The generated key pair is stored in a hidden folder in your home directory (/home/ivan/.ssh in my case), to go there type: cd ~/.ssh You‚Äôll see there 2 files (at least), aws-eb and aws-eb.pub, you need to copy the content of the second one (aws-eb.pub). In MacOS do: pbcopy ~/.ssh/aws-eb.pub In Linux: xclip -selection clipboard ~/.ssh/aws-eb.pub Then go to the IAM console of AWS (same place where we‚Äôve created our user in section 2.1) in https://console.aws.amazon.com/iam/home, edit our user under the Secutiry credentials section and click on the button Upload SSH public key. Paste the code copied and close the pop up. Once uploaded, you‚Äôll get a new SSH Key ID, this is a username we are going to need in the next step: Now we are going to reconfigure GIT in order to use SSH instead of HTTPS. You will need to run these 2 commands, but be aware that you may need to change the eu-west-1 zone if you chose a different one in the beginning of section 3: git remote set-url codecommit-origin ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/decidim-app git remote set-url --push codecommit-origin ssh://git-codecommit.eu-west-1.amazonaws.com/v1/repos/decidim-app As we‚Äôve created a specific key pair for SSH authentication, we need to configure GIT globally in order to use those in the amazon servers. We must add these lines to the file ~/.ssh/config (create the file if does not exists): Use the editor nano (or another): nano ~/.ssh/config And paste the next lines by replacing the User code by the one created after uploading the SSH public key in the previous step: Host git-codecommit.*.amazonaws.com User APK**************WPA IdentityFile ~/.ssh/aws-eb You can test if everything is ok by creating a new commit after EB initialization: $ git add . $ git commit -m &quot;Post EB init&quot; [master b999def] Post EB init 1 file changed, 5 insertions(+), 1 deletion(-) $ git push Everything up-to-date You may want to check the official guide for further info. 4. Configure the environment in ElasticBeanstalk We are going to create the environment, we can create as many as we want, typically: staging, development and production. In our case we will deal with the production one. 4.1 Creating the environment ElasticBeanstalk, let‚Äôs run the command: cd ~/decidim-app eb create production This is going to take a while‚Ä¶ The output will be something like this: Starting environment deployment via CodeCommit Waiting for Application Versions to be pre-processed Finished processing application version app-b999-181030_184555 Setting up default branch Environment details for: production Application name: decidim-app Region: eu-west-1 ... /opt/elasticbeanstalk/hooks/appdeploy/pre/11_asset_compilation.sh failed. For more detail, check /var/log/eb-activity.log using console or EB CLI. 2018-10-30 17:52:12 INFO Command execution completed on all instances. Summary: [Successful: 0, Failed: 1]. 2018-10-30 17:53:14 ERROR Create environment operation is complete, but with errors. For more information, see troubleshooting documentation. As you can see it failed while trying to deploy, but that‚Äôs normal because we need to set up some environment variables. The production environment should be created anyway. We can test it by executing: $ eb status Environment details for: production Application name: decidim-app Region: eu-west-1 ... Status: Ready Health: Red Current CodeCommit settings: Repository: decidim-app Branch: master Specifically, we need to specify the rails secret in a env variable: eb setenv SECRET_KEY_BASE=$(bin/rails secret) The result should be: 018-10-30 18:00:07 INFO Environment update is starting. 2018-10-30 18:00:16 INFO Updating environment production&#39;s configuration settings. 2018-10-30 18:01:29 INFO Successfully deployed new configuration to environment. Now, we are going to create a database tied to ElasticBeanstalk. First, let‚Äôs configure our Decidim application in order to use the proper credentials for that. Edit the file config/database.yml in our decidim-app folder: nano ~/decidim-app/config/database.yml And paste this code (replace existing lines after production:): production: &lt;&lt;: *default adapter: postgresql encoding: unicode database: &lt;%= ENV[&#39;RDS_DB_NAME&#39;] %&gt; username: &lt;%= ENV[&#39;RDS_USERNAME&#39;] %&gt; password: &lt;%= ENV[&#39;RDS_PASSWORD&#39;] %&gt; host: &lt;%= ENV[&#39;RDS_HOSTNAME&#39;] %&gt; port: &lt;%= ENV[&#39;RDS_PORT&#39;] %&gt; And create a new commit: git add . git commit -m &quot;set database config for EB&quot; git push Now, let‚Äôs create the AWS PostgreSQL database: Go to https://console.aws.amazon.com/elasticbeanstalk/home?region=eu-west-1#/applications Click on the production box under the decidim-app application Click on Configuration in the left menu and then scroll down until the box Database, click on modify. Create a PostgreSQL database, choose the instance (db.t2.micro for minimal costs), a username and a password: This is going to take a while as well‚Ä¶ An alternative way to create the database is to go to the RDS section in AWS and create it there outside the scope of ElasticBeanstalk. This way, if you destroy your EB environment, your database won‚Äôt be affected. This approach may be safer for some, specially if you want to deploy your application without downtime (using 2 production environments). If you want to follow this approach, you need to manually create a RDS Posgress Database and manually add the security group to allow EB access to it. Then create the environment varials RDS_* manually with the database credentials. üëâ Check the appendix for how to configure an external RDS database 4.2 Add Swap memory to the container Deploying a Ruby app may require a lot of memory, specially when gems are installed. It is highly recommended to add some swap memory to it to ensure the deploy process is going to be smooth. To do that, we need to create a custom extension that will tell EB what to do when creating a container: Create a folder named .ebextensions and a file named 01_swap.config in it: mkdir .ebextensions nano .ebextensions/01_swap.config Paste this content in that file: commands: 01setup_swap: test: test ! -e /swapfile command: | /bin/dd if=/dev/zero of=/swapfile bs=1M count=3072 /bin/chmod 600 /swapfile /sbin/mkswap /swapfile /sbin/swapon /swapfile Create a commit: git add . git commit -m &quot;Add swap file&quot; git push 4.3 Add required libraries to ELB machines Since version 0.17, the package libicu-dev is required and is not installed by default in AWS machines. To enable it we need to create another file inside the .ebextensions folder: mkdir .ebextensions nano .ebextensions/02_packages.config With this content: packages: yum: git: [] libicu-devel: [] Create a commit: git add . git commit -m &quot;Add required libraries&quot; git push 5. Deploying Decidim When the database is created, we are ready to deploy our first version of Decidim, just type the command: eb deploy Result shoud be something like: Starting environment deployment via CodeCommit Waiting for Application Versions to be pre-processed Finished processing application version app-b5ea-181031_105343 2018-10-31 09:53:53 INFO Environment update is starting. 2018-10-31 09:53:58 INFO Deploying new version to instance(s). 2018-10-31 09:57:36 INFO New application version was deployed to running EC2 instances. 2018-10-31 09:57:36 INFO Environment update completed successfully. Great!! we are up an running! We can now navigate by using our provisional URL provided by AWS. You can type in the console: eb open And your browser will open the page automatically. You will see the system login page: Still many things need to be configured (main url, ssl email, first user, etc) though. We‚Äôll do that in the next section. On the the other hand, once we initialized and configured ElasticBeanstalk, every time we make a modification in our code, we just need to create a GIT commit and deploy to EB, summarized: git add . git commit -m &quot;My custom change&quot; git push eb deploy 6. Further configuration We‚Äôve successfully deploy our Decidim copy in ElasticBeanstalk, but to really be able to use it, we need to provide fully qualified domain name and configure the most basic things. Similar as the original guide but with some particularities regarding EB ans AWS. 6.1 Set the domain in EB There‚Äôs 2 ways to go, the first (easiest) is to use the service Route53 from AWS that let‚Äôs you register the domain and configure it according to this guide. The second is to use an external provider (ie: if you already have a domain). In this case we should follow these steps: Login to your Domain register provider Go to your DNS records administration Add a CNAME record www that points to your environment just created (the same where your browser goes when you execute the command eb open). Something like production.k*********.eu-west-1.elasticbeanstalk.com Redirect the main domain to the www one (if you want to). If you are using Cloudflare it should be something like: 6.2 Configure SSL You can issue a free-SSL certificate from Amazon directly (or you can upload one you have). To do that go to: https://eu-west-1.console.aws.amazon.com/acm/home?region=eu-west-1#/wizard/ And follow the steps, first introduce your domain name: Then choose a validation method: Finally, review it and finalize the process. If you‚Äôve chosen the DNS validation you will need to add an additional CNAME entry in your DNS provider, copy the values from the screen, something like: After a while, your domain will be validated. Then we need to configure the load balancer on ElasticBeanstalk to use it: Go to https://console.aws.amazon.com/elasticbeanstalk/home?region=eu-west-1#/applications Click on the production box under the decidim-app application Click on Configuration in the left menu and then scroll down until the box Load Balancer, click on modify. Then add a listener: Fill in the values, use HTTPS and 443 for the listener port and 80 and HTTP for the instance port. Also choose your generated certificate from the dropdown: When the popup is closed don‚Äôt forget to click on the Apply button at the end of the page. After a while you will be able to navigate securely to your own https:// domain. Now, if you want to redirect all the traffic to the secure site, the easiest way to do it is to configure your copy of Decidim to do so. Edit the file config/environments/production.rb and uncomment the line # config.force_ssl = true: nano ~/decidim-app/config/environments/production.rb Remove the # symbol from the line: ... config.force_ssl = true ... As anytime we make a change create a commit and push and deploy: git add . git commit -m &quot;Force SSL&quot; git push eb deploy Done, now all petitions to http:// will redirect to https:// 6.3 Create the first admin user We didn‚Äôt seed any data to our installation, so we need at least one system user in order to configure our first organization. Also, we cannot access our PostgreSQL database directly, so these are the steps: First we need lo log into production machine via ssh, we do that with this command: eb ssh Once inside, we change to the app working dir: cd /var/app/current/ Then, log into the rails console: bin/rails console And create the user: email = &quot;my-admin@email&quot; password = &quot;&lt;a secure password&gt;&quot; user = Decidim::System::Admin.new(email: email, password: password, password_confirmation: password) user.save! Write quit or press CTRL+D to exit the rails console. Write exit to return to your computer. You can log now with this user into your https://your-domain.com/system and create your organization. 6.4 Setup email As we are using Amazon Web Services, we will configure Amazon SES to send emails (of course you can use SES in other configurations, even without using any other AWS service). First, we need to configure SES and validate our FROM email. Go to https://eu-west-1.console.aws.amazon.com/ses/home?region=eu-west-1# Click on the Email addresses left menu item Click on the Verify a New Email Address button Enter your email address that will be used as FROM in your Decidim communications (it doesn‚Äôt have to be on the same domain, it can be any email address) You should receive an email from Amazon. Open your email inbox and click on the link specified to verify your address. You can verify a whole domain as well (so all the addresses in that domain will be verified). You can repeat this process with many emails as you want. By default, SES is configured to work only on verified emails. Next step is to configure the SMTP server, go to SMTP settings and click the button Create my SMTP Credentials: Next screen will show you a username that‚Äôs going to be created, just accept it and click the button Create. Then click on the Show User SMTP Security Credentials and copy the generated credentials: We need now to set up the environment variables with these SMTP values. We do that with the eb tool (change the values according your generated settings): eb setenv SMTP_USERNAME=AK**************A eb setenv SMTP_PASSWORD=Ag****************************6s eb setenv SMTP_ADDRESS=email-smtp.eu-west-1.amazonaws.com eb setenv SMTP_DOMAIN=mail.my-domain.org Done, Decidim is properly configured to send emails where the from/to are in the verified addresses in AWS SES. Now, remember that SES is configured in Sandbox mode by default, we should request an increase of sending limits to use it in the real world: Also, when using SES you need to keep track of bounces and complaints, and keep them low otherwise they can ban you. More info on that here. And, finally, we should configure Decidim our FROM default email. We do that in the file config/initializers/decidim.rb, let‚Äôs edit the file, create a commit, and deploy: nano config/initializers/decidim.rb Change the lines: config.application_name = &quot;My Application Name&quot; config.mailer_sender = &quot;change-me@domain.org&quot; To match your settings (use a verified SES address). Then create the commits and deploy: git add . git commit -m &quot;Default FROM email&quot; git push eb deploy We still need to configure a Job processor in Ruby on Rails, that will actually send the emails (the email processing system creates a queue that we need to process). The next (last) step is to do that. 6.5 Configure the job system with Sidekiq and Redis We going to use Sidekiq instead of the ‚Äúdelayed_job‚Äù method we use in the basic config. This is a more common setup for production sites and it uses Redis as a backend storage for the jobs queue. First, we need to create a Redis database in AWS. To do that we need to go to https://console.aws.amazon.com/elasticache/home?region=eu-west-1#redis Create a minimal Redis database (choose instance t2.micro). Configure the subnet to use our same AWS zone (eu-west-1 in this tutorial): Choose, under the Security group select, the same group where your elastic beanstalk PosgreSQL is. Otherwise, the server won‚Äôt be able to access to the database. If you search for rds, you probably find that group as the first option: Press all necessary Save and Create buttons. While redis is creating, we must modify the security group to allow connections to the port Redis is using. To do that we need to go to the EC2 security mangament in https://eu-west-1.console.aws.amazon.com/ec2/v2/home?region=eu-west-1#SecurityGroups:sort=groupId. There you need to edit the same rule you just applied in the step before, In the Inbound tab, click Edit and add a rule with the port 6379 where source is exactly the same as the PostgreSQL rule: Once created a endpoint will be generated with our Redis instance (something like c**.**.ng.0001.euw1.cache.amazonaws.com:6379). We need to add the gem sidekit to our Gemfile, edit the file and add a :production section: nano Gemfile Add the :production section with the needed Gem if does not exists: ... group :production do gem &quot;sidekiq&quot; end Now, we need to configure Decidim to use the sidekiq ActiveJob adapter. We need to edit the file config/environments/production.rb: nano config/environments/production.rb Add at the end of the file (before the end statement): ... config.active_record.dump_schema_after_migration = false # Specify active_job sidekiq adapter config.active_job.queue_adapter = :sidekiq end Also, IYou need to specify which queues sidekiq is going to process (otherwise only the default queue is going to be processed), it seems that Decidim uses at last 6 queues, so we need to create a new file config/sidekiq.yml specifying those queues: Create the file: nano config/sidekiq.yml Put this content in it: :concurrency: 6 :queues: - default - mailers - newsletter - newsletters_opt_in - events - metrics üëâ Advanced tip: you can configure a controller (accessible only to Decidim admins) to view the status of the queues used in sidekiq To do that edit the file config/routes.rb and ensure that it begins with: # frozen_string_literal: true require &quot;sidekiq/web&quot; Rails.application.routes.draw do authenticate :user, -&gt;(u) { u.admin? } do mount Sidekiq::Web =&gt; &quot;/sidekiq&quot; end ... Now, when deployed, you will be able to access to your-domain.org/sidekiq to see the status of your queues Now, we need to ensure that the sidekiq processor starts with our instances, to do that we are going to use ElasticBeanstalk extensions, that allows us to add files and services to the instances serving our application. In our case, we need to make sure to start/restart sidekiq in every deployment. We need to create a folder named .ebextensions (if does not exists yet)and a file named 02_sidekiq.config inside it: mkdir .ebextensions nano .ebextensions/02_sidekiq.config Then, in that folder add a file `` with this content (Find the original code in https://gist.github.com/ssaunier/44bbebb9c0fa01953860): # Sidekiq interaction and startup script commands: create_post_dir: command: &quot;mkdir -p /opt/elasticbeanstalk/hooks/appdeploy/post&quot; ignoreErrors: true files: &quot;/opt/elasticbeanstalk/hooks/appdeploy/post/50_restart_sidekiq.sh&quot;: mode: &quot;000755&quot; owner: root group: root content: | #!/usr/bin/env bash . /opt/elasticbeanstalk/support/envvars EB_APP_DEPLOY_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir) EB_APP_PID_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_pid_dir) EB_APP_USER=$(/opt/elasticbeanstalk/bin/get-config container -k app_user) EB_SCRIPT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k script_dir) EB_SUPPORT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k support_dir) . $EB_SUPPORT_DIR/envvars . $EB_SCRIPT_DIR/use-app-ruby.sh SIDEKIQ_PID=$EB_APP_PID_DIR/sidekiq.pid SIDEKIQ_CONFIG=$EB_APP_DEPLOY_DIR/config/sidekiq.yml SIDEKIQ_LOG=$EB_APP_DEPLOY_DIR/log/sidekiq.log cd $EB_APP_DEPLOY_DIR if [ -f $SIDEKIQ_PID ] then su -s /bin/bash -c &quot;kill -TERM `cat $SIDEKIQ_PID`&quot; $EB_APP_USER su -s /bin/bash -c &quot;rm -rf $SIDEKIQ_PID&quot; $EB_APP_USER fi . /opt/elasticbeanstalk/support/envvars.d/sysenv sleep 10 su -s /bin/bash -c &quot;bundle exec sidekiq -e $RACK_ENV -P $SIDEKIQ_PID -C $SIDEKIQ_CONFIG -L $SIDEKIQ_LOG -d&quot; $EB_APP_USER &quot;/opt/elasticbeanstalk/hooks/appdeploy/pre/03_mute_sidekiq.sh&quot;: mode: &quot;000755&quot; owner: root group: root content: | #!/usr/bin/env bash . /opt/elasticbeanstalk/support/envvars EB_APP_USER=$(/opt/elasticbeanstalk/bin/get-config container -k app_user) EB_SCRIPT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k script_dir) EB_SUPPORT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k support_dir) . $EB_SUPPORT_DIR/envvars . $EB_SCRIPT_DIR/use-app-ruby.sh SIDEKIQ_PID=$EB_APP_PID_DIR/sidekiq.pid if [ -f $SIDEKIQ_PID ] then su -s /bin/bash -c &quot;kill -USR1 `cat $SIDEKIQ_PID`&quot; $EB_APP_USER fi Create a commit and deploy: git add . git commit -m &quot;Added Sidekiq&quot; git push Before deploy, let‚Äôs add the env variable with the Redis url generated previously: eb setenv REDIS_URL=redis://******.78gooe.ng.0001.euw1.cache.amazonaws.com:6379 eb deploy That should be all. From now we must be receiving emails from our Decidim installed in ElasticBeanstalk with ease. 6.6 File storage By default any file uploaded to our Decidim will be stored locally in our server instance created by AWS. As this instances may be ephemeral, we will configure file storage using the centralized service S3 from AWS. First, let‚Äôs configure AWS S3 to add a bucket where to store our files. Go to https://s3.console.aws.amazon.com/s3/home?region=eu-west-1 Press the Create bucket button, and create a bucket for our Decidim. Choose a name like my-decidim. Choose the region EU (Ireland) to match all configurations in this tutorial (this is important when configuring Decidim). Create a key/secret pair for this bucket. Go to https://console.aws.amazon.com/iam/home?#home and then to the Policies menu. Add a new policy, choose S3 as service, then All S3 actions (s3:*). Then in the Resources section, write your bucket when requested in the bucket and object subsections: Finish the policy (give it a nice name) and go to the Users section in the main menu, press the Add user and choose Programmatic access when requested. Choose Attach policies directly and then search for the policy we‚Äôve made just before. Review and create the user. Download the credentials and, with the eb tool, create the env variables with those credentials: eb setenv AWS_ACCESS_KEY_ID=************ eb setenv AWS_SECRET_ACCESS_KEY=************** Now it‚Äôs time to configure our Decidim to use those values. First, let‚Äôs add the Gem fog-aws into the Gemfile, section :production: nano Gemfile Leave it like this: ... group :production do gem &quot;sidekiq&quot; gem &quot;fog-aws&quot; end Now, we need to edit the file config/initializers/carrierwave.rb and edit the values. nano config/initializers/carrierwave.rb Remove the whole Carrierwave.configure section and leave it like this (change the bucket name to match yours): ... if Rails.application.secrets.aws_access_key_id.present? require &quot;carrierwave/storage/fog&quot; CarrierWave.configure do |config| config.storage = :fog config.fog_provider = &#39;fog/aws&#39; config.fog_credentials = { provider: &#39;AWS&#39;, aws_access_key_id: Rails.application.secrets.aws_access_key_id, aws_secret_access_key: Rails.application.secrets.aws_secret_access_key, region: &#39;eu-west-1&#39;, host: &#39;s3.eu-west-1.amazonaws.com&#39;, # endpoint: &#39;https://s3.example.com:8080&#39; } config.fog_directory = ENV.fetch(&quot;AWS_BUCKET_NAME&quot;, &#39;your-bucket-name&#39;) # config.fog_public = false config.fog_attributes = { &#39;Cache-Control&#39; =&gt; &quot;max-age=#{365.day.to_i}&quot;, &#39;X-Content-Type-Options&#39; =&gt; &quot;nosniff&quot; } end end Also, edit the file config/secrets.yml: nano config/secrets.yml Add these 2 lines under the section &amp;default: ... default: &amp;default aws_access_key_id: &lt;%= ENV[&quot;AWS_ACCESS_KEY_ID&quot;] %&gt; aws_secret_access_key: &lt;%= ENV[&quot;AWS_SECRET_ACCESS_KEY&quot;] %&gt; ... Create a commit and deploy: git add . git commit -m &quot;Add S3 bucket configuration&quot; git push eb deploy Done! You can go to the Basic Config (skip the email step) and configure the social login and here maps. Remember to commit and deploy every time you change a a file, also, use eb sentenv to create environment variables in your instances. 7. Appendix: Using an external database Using an external database provides some advantages: First, it is more secure as you can destroy your environments an recreate them without affecting your data (otherwise your database will be destroyed as well). Second, you can deploy you application in the so called blue/green technique, which is, basically, having 2 production environments and activating one while the other is updating. So, in this appendix, instead of using the Elastic Beanstalk included database, we will create one manually in the RDS service of AWS. This corresponds to the end of the step 4. Go to https://eu-west-1.console.aws.amazon.com/rds/home?region=eu-west-1# Click on the Create database button, choose PostgreSQL, then specify the identifier of the database (not the database‚Äôs name), username and password: In the next step, you need to choose the security group for the database. We should use the same security group as our created environment, you can find which security group are you using if you go to https://eu-west-1.console.aws.amazon.com/elasticbeanstalk/home?region=eu-west-1#/applications, choose production, go to Configuration, press on the box Instances and look for the checked line: So, choose the option Choose existing VPC security groups and mark the same as the instance you found before: Also choose the database name and click any additional steps to complete the process. Once created, take note of the generated endpoint, it is the hostname needed for the application to connect to (something like decidimapp.********.eu-west-1.rds.amazonaws.com). Finally, you‚Äôll need to modify the security group in order to add an Inbound rule, same as we did with the REDIS section. In this case add the port 5432 (which is the PostgreSQL). Now, you need to set up the environment variables manually, run these commands with your own data: eb setenv RDS_DB_NAME=decidimapp eb setenv RDS_USERNAME=decidimapp eb setenv RDS_PASSWORD=your-password eb setenv RDS_HOSTNAME=decidimapp.********.eu-west-1.rds.amazonaws.com eb setenv RDS_PORT=5432",
    "url": "http://localhost:4000/decidim-aws/",
    "relUrl": "/decidim-aws/"
  },
  "3": {
    "id": "3",
    "title": "Install Decidim on Ubuntu 18.04",
    "content": "Install Decidim on Ubuntu 18.04 These instruction should work in any clean installation of Ubuntu 18.04. You may have to adapt some of the step in other cases. 1. Setup a clean server Use a clean installation, I‚Äôm using DigitalOcean for this example, you can get a 50$, 30-day credit to spend in any machine (we use a 1G memory simple droplet here) if you register with this referral: https://m.do.co/c/b5a36733f0df Then, create a 1G droplet, choose Ubuntu 18.04: Once you‚Äôve created the droplet, you will need a domain name, let‚Äôs say you bought my-decidim.org, you‚Äôll need to point an A record in your DNS provider to the droplet public IP. Then I‚Äôll recommend you to follow the guide from digitalocean in order to create a non-root user and secure your server (this is valid in other providers too): Follow these instructions using decidim instead of sammy as a user: https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04 After that, I‚Äôd recommend to add some swap memory in your server (this is not necessary if you create a bigger memory droplet). For low-memory droplets it seems to work better with swap. To do that follow this tutorial as well: https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-18-04 From now on, I‚Äôll assume you have created a non-root user (with sudo capabilities) named decidim (but use whatever you want) and you are logged into your machine, so you will see a bash prompt similar to this: ssh decidim@my-decidim.org Welcome to Ubuntu 18.04 LTS (GNU/Linux 4.15.0-23-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud 51 packages can be updated. 31 updates are security updates. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;. See &quot;man sudo_root&quot; for details. decidim@decidim:~$ Great, we have our server up and running. Now we install the required packages before installing decidim: 2. Installing necessary software First, let‚Äôs keep our system up to date: sudo apt update sudo apt upgrade sudo apt autoremove Now, configure the proper timezone for your server: sudo dpkg-reconfigure tzdata Then, install some required packages: sudo apt install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev Now, let‚Äôs install ruby, by using the rbenv method. These are the commands you need to run if you follow the guide: git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo &#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; ~/.bashrc source ~/.bashrc Now you should check if you have rbenv correctly installed, running the command type rbenv should give you this answer: decidim@decidim:~$ type rbenv rbenv is a function rbenv () { local command; command=&quot;${1:-}&quot;; if [ &quot;$#&quot; -gt 0 ]; then shift; fi; case &quot;$command&quot; in rehash | shell) eval &quot;$(rbenv &quot;sh-$command&quot; &quot;$@&quot;)&quot; ;; *) command rbenv &quot;$command&quot; &quot;$@&quot; ;; esac } We still need to install ruby-build to simplify the installation of ruby: git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build At this point, you should be able to run the command rbenv install -l that will give you all ruby versions available: decidim@decidim:~$ rbenv install -l Available versions: 1.8.5-p52 1.8.5-p113 ... topaz-dev truffleruby-1.0.0-rc2 truffleruby-1.0.0-rc3 We are going to use version 2.6.3, so run these commands: rbenv install 2.6.3 rbenv global 2.6.3 Now you can verify we have everything in order by running the command ruby -v: decidim@decidim:~$ ruby -v ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-linux] If everything is ok, we need to setup Gems, the package manager for Ruby, after that we will be ready to install Decidim. To setup Gem, execute: echo &quot;gem: --no-document&quot; &gt; ~/.gemrc gem install bundler Again, you can test if everything is ok so far by running the command gem env home decidim@decidim:~$ gem env home /home/decidim/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0 Great, now we have the basic server setup in place, next step is to install Decidim. 3. Installing Decidim Decidim uses Postgresql as a SQL database, we are going to install it in this machine (more advanced configurations will use a separate server for the database): sudo apt install -y postgresql libpq-dev We also need NodeJS as a dependency for the decidim generator, in ubuntu 18.04 it‚Äôs fine to install from the repositories (we also install imageMagick and a library needed since version 0.17, used by Decidim): sudo apt install -y nodejs imagemagick libicu-dev Now, we use the decidim generator to create our application. Note that you still need the package libpg-dev in order tu run the decidim generator (in case you install postgress in another server). First, install the gem Decidim (this may take a while): gem install decidim Now, run the generator to create our app: decidim decidim-app At this point, we have created a new folder in ~/decidim-app with our code. We need to setup the database now. To do that, first we create the user and password in the database: sudo -u postgres psql -c &quot;CREATE USER decidim_app WITH SUPERUSER CREATEDB NOCREATEROLE PASSWORD &#39;Password1&#39;&quot; Choose a good password like I did ;) With the user created, it‚Äôs time for configure Decidim to use these credentials. Because we don‚Äôt want to directly store this sensitive data in the code itself, we are going to use an additional YAML file that will store all the secrets in one place. If, in the future, we want to create a Git repository with our application, we will exclude this file from the version control. In order to translate this file to the config system in Decidim, we are going to include the Ruby Gem ‚Äúfigaro‚Äù in our app to take care of it. First, let‚Äôs change to the decidim‚Äôs folder: cd ~/decidim-app Then, let‚Äôs edit the Gemfile: nano Gemfile We will modify that file to add a ‚Äúproduction‚Äù section with our extra Gems, we add this line before the first group declaration: gem &quot;figaro&quot; And we will create another group section with the production settings that will also install some additional gems needed later on. Add at the end of the Gemfile: group :production do gem &quot;passenger&quot; gem &#39;delayed_job_active_record&#39; gem &quot;daemons&quot; end The whole Gemfile should look similar to this: # frozen_string_literal: true source &quot;https://rubygems.org&quot; ruby RUBY_VERSION gem &quot;decidim&quot;, &quot;0.14.0&quot; # gem &quot;decidim-consultations&quot;, &quot;0.14.0&quot; # gem &quot;decidim-initiatives&quot;, &quot;0.14.0&quot; gem &quot;bootsnap&quot;, &quot;~&gt; 1.3&quot; gem &quot;puma&quot;, &quot;~&gt; 3.0&quot; gem &quot;uglifier&quot;, &quot;~&gt; 4.1&quot; gem &quot;faker&quot;, &quot;~&gt; 1.8&quot; gem &quot;figaro&quot; group :development, :test do gem &quot;byebug&quot;, &quot;~&gt; 10.0&quot;, platform: :mri gem &quot;decidim-dev&quot;, &quot;0.14.0&quot; end group :development do gem &quot;letter_opener_web&quot;, &quot;~&gt; 1.3&quot; gem &quot;listen&quot;, &quot;~&gt; 3.1&quot; gem &quot;spring&quot;, &quot;~&gt; 2.0&quot; gem &quot;spring-watcher-listen&quot;, &quot;~&gt; 2.0&quot; gem &quot;web-console&quot;, &quot;~&gt; 3.5&quot; end group :production do gem &quot;passenger&quot; gem &#39;delayed_job_active_record&#39; gem &quot;daemons&quot; end After that we need to update our app to include the extra gems, run the next command (inside the app folder): bundle install Now, it‚Äôs time to create the configuration file with our custom values. We already have the database credentials (we‚Äôve created the user before) and we need a random string that will be used by Decidim to encrypt cookies and other security stuff. Let‚Äôs generate a random string by executing the command rake secret inside the app folder: decidim@decidim:~/decidim-app$ cd ~/decidim-app decidim@decidim:~/decidim-app$ rake secret e2418a1987378e36f18740d25f0360a18099a5caa5d04700ea3336d9fdefadc5362dc885a7a15f671e81f7d77bc98fa4d8abfd048f829a78d7ffd33cd8b4b287 Copy that generated string and edit the new config file: nano ~/decidim-app/config/application.yml Paste inside this content: DATABASE_URL: postgres://decidim_app:Password1@localhost/decidim_prod SECRET_KEY_BASE: e2418a1987378e36f18740d25f0360a18099a5caa5d04700ea3336d9fdefadc5362dc885a7a15f671e81f7d77bc98fa4d8abfd048f829a78d7ffd33cd8b4b287 Notes: I‚Äôve named my database decidim_prod, change that value to whatever you want for your decidim app. Be aware that line with the with the SECRET_KEY_BASE keyword is only ONE line and you MUST put your own generated secret (the one generated with the rake secret command) üëâ Going pro (optional): Now it‚Äôs a good time to initialize your installation as a GIT repository. This will allow to keep track of your changes and revert them is something goes wrong. This is optional, basically you need to execute: cd ~/decidim-app git init . git commit -m &quot;Initial commit. Generated with Decidim 0.X https://decidim.org&quot; After that you should create commits everytime you make a relevant change. At this point Decidim should be able to start working. We need to initialize and update the database by doing this: cd ~/decidim-app bin/rails db:create RAILS_ENV=production bin/rails assets:precompile db:migrate RAILS_ENV=production The response to the second command should look something like this (quite long), this command compiles the static assets to prepare our app for production and migrates the database: decidim@decidim:~/decidim-app$ bin/rails db:create RAILS_ENV=production Created database &#39;decidim_prod&#39; decidim@decidim:~/decidim-app$ bin/rails assets:precompile db:migrate RAILS_ENV=production Yarn executable was not detected in the system. Download Yarn at https://yarnpkg.com/en/docs/install I, [2018-07-16T13:10:56.442340 #32755] INFO -- : Writing /home/decidim/decidim-app/public/assets/decidim/api/docs-3ca85e11b4f676d392a15494a0eb66962aaf08382c60a09ae3f1d7a6806a59ae.js ... == 20180713145001 DeviseCreateDecidimUsers: migrating ========================= -- adapter_name() -&gt; 0.0000s -- adapter_name() -&gt; 0.0000s -- adapter_name() -&gt; 0.0000s -- create_table(:decidim_users, {:id=&gt;:integer}) -&gt; 0.0056s ... Now we are going to log into the Decidim console Rails app and create our first admin user: bin/rails console -e production A new prompt will appear: Loading production environment (Rails 5.2.0) irb(main):001:0&gt; In there, write these 4 lines and press enter (put your email and some secure password, you will use these credentials to login into Decidim super-admin: email = &quot;my-admin@email&quot; password = &quot;&lt;a secure password&gt;&quot; user = Decidim::System::Admin.new(email: email, password: password, password_confirmation: password) user.save! Write quit or press CTRL+D to exit the rails console. If everything went fine, a very basic Decidim installation is ready to be shown to the world. We only are one step away from the glory, that is to configure an http web server to proxy our ruby application and handle the user petitions. 4. Installing Nginx As a web server we will use Nginx. To install Nginx execute the next commands (the first installs nginx, the others enables the public ports in the firewall, otherwise our webserver won‚Äôt be accessible): sudo apt -y install nginx sudo ufw allow http sudo ufw allow https The last 2 commands are to allow the firewall (if we have it activated) let pass the http/https connection to the server. If you don‚Äôt use a firewall, you can skip them. Nginx is a very fast and efficient web server but it doesn‚Äôt handle Ruby applications by itself. We need and intermediary gateway for that, we will use Passenger. I‚Äôll summarize here all the commands to install Passenger in Ubuntu 18.04 (follow the link to get into details): sudo apt install -y dirmngr gnupg sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7 sudo apt install -y apt-transport-https ca-certificates sudo sh -c &#39;echo deb https://oss-binaries.phusionpassenger.com/apt/passenger bionic main &gt; /etc/apt/sources.list.d/passenger.list&#39; sudo apt update sudo apt install -y libnginx-mod-http-passenger Next is to activate passenger, execute this (it‚Äôs one line): if [ ! -f /etc/nginx/modules-enabled/50-mod-http-passenger.conf ]; then sudo ln -s /usr/share/nginx/modules-available/mod-http-passenger.load /etc/nginx/modules-enabled/50-mod-http-passenger.conf ; fi You can check if the file is created successfully by using ls on that file, it should be something similar to this: decidim@decidim:~/decidim-app$ sudo ls /etc/nginx/conf.d/mod-http-passenger.conf /etc/nginx/conf.d/mod-http-passenger.conf For additional checks, restart nginx: sudo service nginx restart If you run the command passenger-config validate-install it should give you an answer like this: decidim@decidim:~/decidim-app$ sudo /usr/bin/passenger-config validate-install What would you like to validate? Use &lt;space&gt; to select. If the menu doesn&#39;t display correctly, press &#39;!&#39; ‚Ä£ ‚¨¢ Passenger itself ‚¨° Apache - * Checking whether this Passenger install is in PATH... ‚úì * Checking whether there are no other Passenger installations... ‚úì Everything looks good. :-) If the output complains about having 2 copies of passenger installed, then passenger may be using the wrong copy of it. Let‚Äôs ensure everything is ok by editing the file /etc/nginx/conf.d/mod-http-passenger.conf: sudo nano /etc/nginx/conf.d/mod-http-passenger.conf And be sure that the line that contains passenger_ruby points to our .rbenv ruby folder, the whole file should look like this: ### Begin automatically installed Phusion Passenger config snippet ### passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini; passenger_ruby /home/decidim/.rbenv/shims/ruby; ### End automatically installed Phusion Passenger config snippet ### Once Nginx &amp; Passenger are installed, we‚Äôll configure nginx to point http(s) request to our copy of Decidim. To do that, we need to create an Nginx configuration file and setup a new virtual host with our domain (ie: my-decidim.org): Create/edit the new Nginx config file: sudo nano /etc/nginx/sites-enabled/decidim.conf Paste this inside (replace my-decidim.org with your own domain): server { listen 80; listen [::]:80 ipv6only=on; server_name my-decidim.org; client_max_body_size 32M; passenger_enabled on; passenger_ruby /home/decidim/.rbenv/shims/ruby; rails_env production; root /home/decidim/decidim-app/public; } Restart Nginx now: sudo service nginx restart Done! Decidim should be working now on our server, if you point your browser to your domain (ie: my-decidim.org) it will redirect you to the system admin interface (which is the web interface that will allow to create your first organization): You can login into this administrator using the credentials you created when logged into the Rails console (my-admin@email). But before to do that, there are somethings that should be configured, because, right now, our system is not capable yet of sending emails (which is a basic thing). Continue this guide by setting up a basic configuration.",
    "url": "http://localhost:4000/decidim-bionic/",
    "relUrl": "/decidim-bionic/"
  },
  "4": {
    "id": "4",
    "title": "Updating Decidim between version",
    "content": "Updating Decidim Because Decidim is a gem in our system, to update it we will have to edit our Gemfile and specify the new version number. To keep our system up to date, we can visit the page https://github.com/decidim/decidim/releases and compare with our Gemfile. See if the lines specifying the gem called ‚Äúdecidim-something‚Äù are followed by the number corresponding to the latest release: gem &quot;decidim&quot;, &quot;0.15.1&quot; gem &quot;decidim-conferences&quot;, &quot;0.15.1&quot; gem &quot;decidim-consultations&quot;, &quot;0.15.1&quot; gem &quot;decidim-initiatives&quot;, &quot;0.15.1&quot; gem &quot;decidim-dev&quot;, &quot;0.15.1&quot; For example, if the latest release is 0.16 we could decide to update. To update, usually requires only to change the old version number on these gems to the new one. For instance, previous example should be: gem &quot;decidim&quot;, &quot;0.16&quot; gem &quot;decidim-conferences&quot;, &quot;0.16&quot; gem &quot;decidim-consultations&quot;, &quot;0.16&quot; gem &quot;decidim-initiatives&quot;, &quot;0.16&quot; gem &quot;decidim-dev&quot;, &quot;0.16&quot; After doing that, you need to execute these commands: bundle update decidim bin/rails decidim:upgrade bin/rails db:migrate In theory, that would be all. However, you need to be careful in certain situations, specially if your copy of Decidim has many code modifications. I‚Äôd recommend to always test the upgrade in a separate machine with the same configuration (If using Digitalocean you can create an snapshot of the server, tested the update, and then remove it, similar process on other providers). Recommendations Make a full backup of the database before updating, just in case something unexpected happens. If you are more than update away. Always update from one version to the immediately next one and then repeat the process until you are up to date. Always check the instructions for a certain version upgrade in https://github.com/decidim/decidim/releases. Some releases require to perform certain actions as they may change some database structures. Follow that instructions if you are affected. Check also the file https://github.com/decidim/decidim/blob/master/CHANGELOG.md It may have relevant information for updates between versions.",
    "url": "http://localhost:4000/decidim-update/",
    "relUrl": "/decidim-update/"
  },
  "5": {
    "id": "5",
    "title": "Hacking Decidim",
    "content": "Hacking Decidim Once you successfully installed Decidim you‚Äôll probably want to change some things in it. For instance, change some styles in the HTML layout, or maybe some defaults about form validations, or add a custom page. We will try to cover (to an extend) what can you do to achive that in here. (work in progres‚Ä¶)",
    "url": "http://localhost:4000/hacking-decidim/",
    "relUrl": "/hacking-decidim/"
  },
  "6": {
    "id": "6",
    "title": "Installing Decidim",
    "content": "Installing Decidim Check the formatted guide! üëâ https://platoniq.github.io/decidim-install/ A easy guide to install Decidim, which is a participatory democracy framework created in Ruby on Rails. It‚Äôs a very interesting piece of software but it may be challenging to install it if you are not familiar with the internals. Here I‚Äôll make a step-by-step guide on how to install it on production into a machine with Ubuntu 18.04. I‚Äôve made this guide because it can be quite challenging to install Decidim in production (as there‚Äôs currently not much official documentation covering this). This guide also covers some common problems you may face during the process. Start here: Installing Decidim on Ubuntu 18.04This will guide you to the process of install Decidim in a clean machine and getting it up an running. Minimal configuration of DecidimThis part is to configure the 3 extra aspects required run Decidim appropriately. Configure Email sending, SSL security in your server and OAuth authentication. Installing in Amazon AWS with ElasticBeanstalkAn alternative guide to install Decidim in Amazon AWS. This is a Heroku-like PaaS deployment system. It auto-scales servers if needed and it may be a little cheaper than heroku. Decidim update guideCheck this to upgrade Decidim to a new version. Advanced config &amp; tricksA work in progress file to document some common issues and how to solve it (feel free to ask in the issues). Feel free to create issues or pull requests if you encounter errors or want to make improvements in this guide! Official resources Decidim official documentation, Happy to say that this guide is linked there! Decidim source code, There‚Äôs additional documentation here (dive into the docs/ folder). Edu Decidim Community using Decidim with resources to successfully use Decidim. Meta Decidim Community using Decidim to make decisions about the software itself. Questions? Feel free to check the issues or open a new one if you have questions or something is wrong. Pull-request are always wellcome. Also, give me a start if you liked it! Star Credits @Author Ivan Verg√©s Twitter @ivanverges @Thanks to Robert Garrig√≥s and the rest of testers that point many improvements and fixes to this guide, Guillem Marpons and the rest of the Decidim team for their encouragement and support. @License AGPL 3.0",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  
}
